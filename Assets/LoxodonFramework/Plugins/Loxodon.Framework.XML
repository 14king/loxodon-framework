<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Loxodon.Framework</name>
    </assembly>
    <members>
        <member name="P:Loxodon.Framework.Asynchronous.AsyncResult.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.AsyncResult.IsDone">
            <summary>
            Returns  "true" if this task finished.
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.AsyncResult.Result">
            <summary>
            The execution result
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.AsyncResult.IsCancelled">
            <summary>
            Returns "true" if this task was cancelled before it completed normally.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.AsyncResult.Cancel">
            <summary>
            Attempts to cancel execution of this task.  This attempt will 
            fail if the task has already completed, has already been cancelled,
            or could not be cancelled for some other reason.If successful,
            and this task has not started when "Cancel" is called,
            this task should never run. 
            </summary>
            <exception cref="T:System.NotSupportedException">If not supported, throw an exception.</exception>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.AsyncResult.WaitForDone">
            <summary>
            Wait for the result,suspends the coroutine.
            eg:
            IAsyncResult result;
            yiled return result.WaitForDone();
            </summary>
            <returns></returns>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.AsyncResult`1.Result">
            <summary>
            The execution result
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.AsyncTask.#ctor(System.Action,System.Boolean)">
             <summary>
            
             </summary>
             <param name="task"></param>
             <param name="runOnMainThread"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.AsyncTask.#ctor(System.Action{Loxodon.Framework.Asynchronous.IPromise},System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="task"></param>
            <param name="runOnMainThread"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.AsyncTask.#ctor(System.Collections.IEnumerator,System.Boolean)">
            <summary>
            run on main thread
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.AsyncTask`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            
            </summary>
            <param name="task"></param>
            <param name="runOnMainThread"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.AsyncTask`1.#ctor(System.Action{Loxodon.Framework.Asynchronous.IPromise{`0}},System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="task"></param>
            <param name="runOnMainThread"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.AsyncTask`1.#ctor(System.Func{Loxodon.Framework.Asynchronous.IPromise{`0},System.Collections.IEnumerator},System.Boolean)">
            <summary>
            
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.ICallbackable.OnCallback(System.Action{Loxodon.Framework.Asynchronous.IAsyncResult})">
            <summary>
            Called when the task is finished.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.ICallbackable`1.OnCallback(System.Action{Loxodon.Framework.Asynchronous.IAsyncResult{`0}})">
            <summary>
            Called when the task is finished.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressCallbackable`1.OnCallback(System.Action{Loxodon.Framework.Asynchronous.IProgressResult{`0}})">
            <summary>
            Called when the task is finished.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressCallbackable`1.OnProgressCallback(System.Action{`0})">
            <summary>
            Called when the progress update.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressCallbackable`2.OnCallback(System.Action{Loxodon.Framework.Asynchronous.IProgressResult{`0,`1}})">
            <summary>
            Called when the task is finished.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressCallbackable`2.OnProgressCallback(System.Action{`0})">
            <summary>
            Called when the progress update.
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IAsyncResult">
            <summary>
            IAsyncResult
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IAsyncResult.Result">
            <summary>
            Gets the result of the asynchronous operation.
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IAsyncResult.Exception">
            <summary>
            Gets the cause of the asynchronous operation.
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IAsyncResult.IsDone">
            <summary>
            Returns <code>true</code> if the asynchronous operation is finished.
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IAsyncResult.IsCancelled">
            <summary>
            Returns <code>true</code> if the asynchronous operation was cancelled before it completed normally.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncResult.Cancel">
            <summary>
            Attempts to cancel execution of this task.  This attempt will 
            fail if the task has already completed, has already been cancelled,
            or could not be cancelled for some other reason.If successful,
            and this task has not started when "Cancel" is called,
            this task should never run. 
            </summary>
            <exception cref="T:System.NotSupportedException">If not supported, throw an exception.</exception>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncResult.Callbackable">
            <summary>
            Gets a callbackable object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncResult.Synchronized">
            <summary>
            Gets a synchronized object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncResult.WaitForDone">
            <summary>
            Wait for the result,suspends the coroutine.
            eg:
            IAsyncResult result;
            yiled return result.WaitForDone();
            </summary>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IAsyncResult`1">
            <summary>
            IAsyncResult
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IAsyncResult`1.Result">
            <summary>
            Gets the result of the asynchronous operation.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncResult`1.Callbackable">
            <summary>
            Gets a callbackable object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncResult`1.Synchronized">
            <summary>
            Gets a synchronized object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IAsyncTask">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask.OnPreExecute(System.Action,System.Boolean)">
            <summary>
            Triggered when a task starts.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask.OnPostExecute(System.Action,System.Boolean)">
            <summary>
            Triggered when the task is completed.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask.OnError(System.Action{System.Exception},System.Boolean)">
            <summary>
            Triggered when an error occurs.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask.OnFinish(System.Action,System.Boolean)">
            <summary>
            Always call the end of the task.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask.Start(System.Int32)">
            <summary>
            Start the task after the given delay.
            </summary>
            <param name="delay">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask.Start">
            <summary>
            Start the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IAsyncTask`1">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask`1.OnPreExecute(System.Action,System.Boolean)">
            <summary>
            Triggered when a task starts.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask`1.OnPostExecute(System.Action{`0},System.Boolean)">
            <summary>
            Triggered when the task is completed.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask`1.OnError(System.Action{System.Exception},System.Boolean)">
            <summary>
            Triggered when an error occurs.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask`1.OnFinish(System.Action,System.Boolean)">
            <summary>
            Always call the end of the task.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask`1.Start(System.Int32)">
            <summary>
            Start the task after the given delay.
            </summary>
            <param name="delay">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IAsyncTask`1.Start">
            <summary>
            Start the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IProgressPromise`1">
            <summary>
            
            </summary>
            <typeparam name="TProgress"></typeparam>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IProgressPromise`1.Progress">
            <summary>
            The task's progress.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressPromise`1.UpdateProgress(`0)">
            <summary>
            Update progress
            </summary>
            <param name="progress"></param>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IProgressPromise`2">
            <summary>
            
            </summary>
            <typeparam name="TProgress"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IProgressResult`1">
            <summary>
            
            </summary>
            <typeparam name="TProgress"></typeparam>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IProgressResult`1.Progress">
            <summary>
            The task's progress.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressResult`1.Callbackable">
            <summary>
            Gets a callbackable object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IProgressResult`2">
            <summary>
            
            </summary>
            <typeparam name="TProgress"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressResult`2.Callbackable">
            <summary>
            Gets a callbackable object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IProgressTask`1">
            <summary>
            
            </summary>
            <typeparam name="TProgress"></typeparam>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`1.OnPreExecute(System.Action,System.Boolean)">
            <summary>
            Triggered when a task starts.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`1.OnPostExecute(System.Action,System.Boolean)">
            <summary>
            Triggered when the task is completed.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`1.OnError(System.Action{System.Exception},System.Boolean)">
            <summary>
            Triggered when an error occurs.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`1.OnFinish(System.Action,System.Boolean)">
            <summary>
            Always call the end of the task.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`1.OnProgressUpdate(System.Action{`0},System.Boolean)">
            <summary>
            Update the progress.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`1.Start(System.Int32)">
            <summary>
            Start the task after the given delay.
            </summary>
            <param name="delay">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`1.Start">
            <summary>
            Start the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IProgressTask`2">
            <summary>
            
            </summary>
            <typeparam name="TProgress"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`2.OnPreExecute(System.Action,System.Boolean)">
            <summary>
            Triggered when a task starts.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`2.OnPostExecute(System.Action{`1},System.Boolean)">
            <summary>
            Triggered when the task is completed.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`2.OnError(System.Action{System.Exception},System.Boolean)">
            <summary>
            Triggered when an error occurs.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`2.OnFinish(System.Action,System.Boolean)">
            <summary>
            Always call the end of the task.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`2.OnProgressUpdate(System.Action{`0},System.Boolean)">
            <summary>
            Update the progress.
            </summary>
            <param name="callback"></param>
            <param name="runOnMainThread"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`2.Start(System.Int32)">
            <summary>
            Start the task after the given delay.
            </summary>
            <param name="delay">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IProgressTask`2.Start">
            <summary>
            Start the task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IPromise">
            <summary>
            
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IPromise.Result">
            <summary>
            The execution result
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IPromise.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IPromise.IsDone">
            <summary>
            Returns  "true" if this task finished.
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IPromise.IsCancelled">
            <summary>
            Returns "true" if this task was cancelled before it completed normally.
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IPromise.IsCancellationRequested">
            <summary>
            Returns  "true" if there is a cancellation request.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IPromise.SetCancelled">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IPromise.SetException(System.String)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IPromise.SetException(System.Exception)">
            <summary>
            
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IPromise.SetResult(System.Object)">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Loxodon.Framework.Asynchronous.IPromise`1">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.IPromise`1.Result">
            <summary>
            The execution result
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.IPromise`1.SetResult(`0)">
            <summary>
            
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.ProgressResult`1.Progress">
            <summary>
            The task's progress.
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Asynchronous.ProgressResult`2.Result">
            <summary>
            The execution result
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.ProgressTask`1.#ctor(System.Action{Loxodon.Framework.Asynchronous.IProgressPromise{`0}},System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="task"></param>
            <param name="runOnMainThread"></param>
            <param name="cancelable"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.ProgressTask`1.#ctor(System.Func{Loxodon.Framework.Asynchronous.IProgressPromise{`0},System.Collections.IEnumerator},System.Boolean)">
            <summary>
            run on main thread.
            </summary>
            <param name="task"></param>
            <param name="cancelable"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.ProgressTask`2.#ctor(System.Action{Loxodon.Framework.Asynchronous.IProgressPromise{`0,`1}},System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="task"></param>
            <param name="runOnMainThread"></param>
            <param name="cancelable"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.ProgressTask`2.#ctor(System.Func{Loxodon.Framework.Asynchronous.IProgressPromise{`0,`1},System.Collections.IEnumerator},System.Boolean)">
            <summary>
            
            </summary>
            <param name="task"></param>
            <param name="cancelable"></param>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.ISynchronizable.WaitForDone">
            <summary>
             Wait for done,will block the current thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.ISynchronizable.WaitForResult(System.Int32)">
            <summary>
            Wait for the result,will block the current thread.
            </summary>
            <param name="millisecondsTimeout"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.ISynchronizable.WaitForResult(System.TimeSpan)">
            <summary>
             Wait for the result,will block the current thread.
            </summary>
            <param name="timeout"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.ISynchronizable`1.WaitForResult(System.Int32)">
            <summary>
            Wait for the result,will block the current thread.
            </summary>
            <param name="millisecondsTimeout"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.ISynchronizable`1.WaitForResult(System.TimeSpan)">
            <summary>
            Wait for the result,will block the current thread.
            </summary>
            <param name="timeout"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.Synchronizable.WaitForDone">
            <summary>
            Wait for done,will block the current thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.Synchronizable.WaitForResult(System.Int32)">
            <summary>
            Wait for the result,will block the current thread.
            </summary>
            <param name="millisecondsTimeout"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.Synchronizable.WaitForResult(System.TimeSpan)">
            <summary>
             Wait for the result,will block the current thread.
            </summary>
            <param name="timeout"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.Synchronizable`1.WaitForDone">
            <summary>
            Wait for done,will block the current thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.Synchronizable`1.WaitForResult(System.Int32)">
            <summary>
            Wait for the result,will block the current thread.
            </summary>
            <param name="millisecondsTimeout"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Asynchronous.Synchronizable`1.WaitForResult(System.TimeSpan)">
            <summary>
            Wait for the result,will block the current thread.
            </summary>
            <param name="timeout"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Commands.CompositeCommand">
            <summary>
            The CompositeCommand composes one or more ICommands.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Commands.CompositeCommand.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Loxodon.Framework.Commands.CompositeCommand"/>.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Commands.CompositeCommand.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Loxodon.Framework.Commands.CompositeCommand"/>.
            </summary>
            <param name="monitorCommandActivity">Indicates when the command activity is going to be monitored.</param>
        </member>
        <member name="M:Loxodon.Framework.Commands.CompositeCommand.RegisterCommand(Loxodon.Framework.Commands.ICommand)">
            <summary>
            Adds a command to the collection and signs up for the <see cref="E:Loxodon.Framework.Commands.ICommand.CanExecuteChanged"/> event of it.
            </summary>
             <remarks>
            If this command is set to monitor command activity, and <paramref name="command"/> 
            implements the <see cref="T:Loxodon.Framework.Commands.IActiveAware"/> interface, this method will subscribe to its
            <see cref="E:Loxodon.Framework.Commands.IActiveAware.IsActiveChanged"/> event.
            </remarks>
            <param name="command">The command to register.</param>
        </member>
        <member name="M:Loxodon.Framework.Commands.CompositeCommand.UnregisterCommand(Loxodon.Framework.Commands.ICommand)">
            <summary>
            Removes a command from the collection and removes itself from the <see cref="E:Loxodon.Framework.Commands.ICommand.CanExecuteChanged"/> event of it.
            </summary>
            <param name="command">The command to unregister.</param>
        </member>
        <member name="M:Loxodon.Framework.Commands.CompositeCommand.CanExecute(System.Object)">
            <summary>
            Forwards <see cref="M:Loxodon.Framework.Commands.ICommand.CanExecute(System.Object)"/> to the registered commands and returns
            <see langword="true" /> if all of the commands return <see langword="true" />.
            </summary>
            <param name="parameter">Data used by the command.
            If the command does not require data to be passed, this object can be set to <see langword="null" />.
            </param>
            <returns><see langword="true" /> if all of the commands return <see langword="true" />; otherwise, <see langword="false" />.</returns>
        </member>
        <member name="E:Loxodon.Framework.Commands.CompositeCommand.CanExecuteChanged">
            <summary>
            Occurs when any of the registered commands raise <see cref="E:Loxodon.Framework.Commands.ICommand.CanExecuteChanged"/>.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Commands.CompositeCommand.Execute(System.Object)">
            <summary>
            Forwards <see cref="M:Loxodon.Framework.Commands.ICommand.Execute(System.Object)"/> to the registered commands.
            </summary>
            <param name="parameter">Data used by the command.
            If the command does not require data to be passed, this object can be set to <see langword="null" />.
            </param>
        </member>
        <member name="M:Loxodon.Framework.Commands.CompositeCommand.ShouldExecute(Loxodon.Framework.Commands.ICommand)">
            <summary>
            Evaluates if a command should execute.
            </summary>
            <param name="command">The command to evaluate.</param>
            <returns>A <see cref="T:System.Boolean"/> value indicating whether the command should be used 
            when evaluating <see cref="M:Loxodon.Framework.Commands.CompositeCommand.CanExecute(System.Object)"/> and <see cref="M:Loxodon.Framework.Commands.CompositeCommand.Execute(System.Object)"/>.</returns>
            <remarks>
            If this command is set to monitor command activity, and <paramref name="command"/>
            implements the <see cref="T:Loxodon.Framework.Commands.IActiveAware"/> interface, 
            this method will return <see langword="false" /> if the command's <see cref="P:Loxodon.Framework.Commands.IActiveAware.IsActive"/> 
            property is <see langword="false" />; otherwise it always returns <see langword="true" />.</remarks>
        </member>
        <member name="P:Loxodon.Framework.Commands.CompositeCommand.RegisteredCommands">
            <summary>
            Gets the list of all the registered commands.
            </summary>
            <value>A list of registered commands.</value>
            <remarks>This returns a copy of the commands subscribed to the CompositeCommand.</remarks>
        </member>
        <member name="T:Loxodon.Framework.Commands.IActiveAware">
            <summary>
            Interface that defines if the object instance is active
            and notifies when the activity changes.
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Commands.IActiveAware.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is active.
            </summary>
            <value><see langword="true" /> if the object is active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:Loxodon.Framework.Commands.IActiveAware.IsActiveChanged">
            <summary>
            Notifies that the value for <see cref="P:Loxodon.Framework.Commands.IActiveAware.IsActive"/> property has changed.
            </summary>
        </member>
        <member name="T:Loxodon.Framework.Commands.ICommand">
            <summary>
            
            </summary>
        </member>
        <member name="E:Loxodon.Framework.Commands.ICommand.CanExecuteChanged">
            <summary>
            Occurs when can execute changed.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Commands.ICommand.CanExecute(System.Object)">
            <summary>
            Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">Parameter.</param>
            <returns><c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Loxodon.Framework.Commands.ICommand.Execute(System.Object)">
            <summary>
            Execute the specified parameter.
            </summary>
            <param name="parameter">Parameter.</param>
        </member>
        <member name="T:Loxodon.Framework.Execution.CountDownEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:Loxodon.Framework.Execution.CountFinishedEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Execution.Executors.MainThreadExecutor.Stop(System.Collections.IEnumerator)">
            <summary>
            Stop Coroutine
            </summary>
            <param name="routine"></param>
        </member>
        <member name="M:Loxodon.Framework.Execution.Executors.MainThreadExecutor.Stop(UnityEngine.Coroutine)">
            <summary>
            Stop Coroutine
            </summary>
            <param name="routine"></param>
        </member>
        <member name="T:Loxodon.Framework.Execution.InterceptableEnumerator">
            <summary>
            Interceptable enumerator
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Execution.InterceptableEnumerator.RegisterConditionBlock(System.Func{System.Boolean})">
            <summary>
            Register a condition code block.
            </summary>
            <param name="hasNext"></param>
        </member>
        <member name="M:Loxodon.Framework.Execution.InterceptableEnumerator.RegisterCatchBlock(System.Action{System.Exception})">
            <summary>
            Register a code block, when an exception occurs it will be executed.
            </summary>
            <param name="onException"></param>
        </member>
        <member name="M:Loxodon.Framework.Execution.InterceptableEnumerator.RegisterFinallyBlock(System.Action)">
            <summary>
            Register a code block, when the end of the operation is executed.
            </summary>
            <param name="onFinally"></param>
        </member>
        <member name="M:Loxodon.Framework.Execution.IScheduledExecutor.Start">
            <summary>
            Start the service.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Execution.IScheduledExecutor.Stop">
            <summary>
            Stop the service.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Execution.IScheduledExecutor.Schedule``1(System.Func{``0},System.Int64)">
            <summary>
            Creates and executes a task that becomes enabled after the given delay.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="command"></param>
            <param name="delay">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Execution.IScheduledExecutor.Schedule``1(System.Func{``0},System.TimeSpan)">
            <summary>
            Creates and executes a task that becomes enabled after the given delay.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="command"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Execution.IScheduledExecutor.Schedule(System.Action,System.Int64)">
            <summary>
            Creates and executes a one-shot action that becomes enabled after the given delay.
            </summary>
            <param name="command"></param>
            <param name="delay">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Execution.IScheduledExecutor.Schedule(System.Action,System.TimeSpan)">
            <summary>
            Creates and executes a one-shot action that becomes enabled after the given delay.
            </summary>
            <param name="command"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Execution.IScheduledExecutor.ScheduleAtFixedRate(System.Action,System.Int64,System.Int64)">
            <summary>
            Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period, and so on.
            </summary>
            <param name="command"></param>
            <param name="initialDelay">millisecond</param>
            <param name="period">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Execution.IScheduledExecutor.ScheduleAtFixedRate(System.Action,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period, and so on.
            </summary>
            <param name="command"></param>
            <param name="initialDelay"></param>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Execution.IScheduledExecutor.ScheduleWithFixedDelay(System.Action,System.Int64,System.Int64)">
            <summary>
            Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next.
            </summary>
            <param name="command"></param>
            <param name="initialDelay">millisecond</param>
            <param name="delay">millisecond</param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Execution.IScheduledExecutor.ScheduleWithFixedDelay(System.Action,System.TimeSpan,System.TimeSpan)">
            <summary>
            Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given delay between the termination of one execution and the commencement of the next.
            </summary>
            <param name="command"></param>
            <param name="initialDelay"></param>
            <param name="delay"></param>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Messaging.IMessenger">
            <summary>
            The Messenger is a class allowing objects to exchange messages.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Messaging.IMessenger.Subscribe(System.Type,System.Action{System.Object})">
            <summary>
            Subscribe a message.
            </summary>
            <param name="type">The type of message that the recipient subscribes for.</param>
            <param name="action">The action that will be executed when a message of type T is sent.</param>
            <returns>Disposable object that can be used to unsubscribe the message from the messenger.
            if the disposable object is disposed,the message is automatically unsubscribed.</returns>
        </member>
        <member name="M:Loxodon.Framework.Messaging.IMessenger.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe a message.
            </summary>
            <typeparam name="T">The type of message that the recipient subscribes for.</typeparam>
            <param name="action">The action that will be executed when a message of type T is sent.</param>
            <returns>Disposable object that can be used to unsubscribe the message from the messenger.
            if the disposable object is disposed,the message is automatically unsubscribed.</returns>
        </member>
        <member name="M:Loxodon.Framework.Messaging.IMessenger.Subscribe(System.String,System.Type,System.Action{System.Object})">
            <summary>
            Subscribe a message.
            </summary>
            <param name="channel">A name for a messaging channel.If a recipient subscribes
            using a channel, and a sender sends a message using the same channel, then this
            message will be delivered to the recipient. Other recipients who did not
            use a channel when subscribing (or who used a different channel) will not
            get the message. </param>
            <param name="type">The type of message that the recipient subscribes for.</param>
            <param name="action">The action that will be executed when a message of type T is sent.</param>
            <returns>Disposable object that can be used to unsubscribe the message from the messenger.
            if the disposable object is disposed,the message is automatically unsubscribed.</returns>
        </member>
        <member name="M:Loxodon.Framework.Messaging.IMessenger.Subscribe``1(System.String,System.Action{``0})">
            <summary>
            Subscribe a message.
            </summary>
            <typeparam name="T">The type of message that the recipient subscribes for.</typeparam>
            <param name="channel">A name for a messaging channel.If a recipient subscribes
            using a channel, and a sender sends a message using the same channel, then this
            message will be delivered to the recipient. Other recipients who did not
            use a channel when subscribing (or who used a different channel) will not
            get the message. </param>
            <param name="action">The action that will be executed when a message of type T is sent.</param>
            <returns>Disposable object that can be used to unsubscribe the message from the messenger.
            if the disposable object is disposed,the message is automatically unsubscribed.</returns>
        </member>
        <member name="M:Loxodon.Framework.Messaging.IMessenger.Publish(System.Object)">
            <summary>
            Publish a message to subscribed recipients. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Loxodon.Framework.Messaging.IMessenger.Publish``1(``0)">
            <summary>
            Publish a message to subscribed recipients. 
            </summary>
            <typeparam name="T">The type of message that will be sent.</typeparam>
            <param name="message">The message to send to subscribed recipients.</param>
        </member>
        <member name="M:Loxodon.Framework.Messaging.IMessenger.Publish(System.String,System.Object)">
            <summary>
            Publish a message to subscribed recipients. 
            </summary>
            <param name="channel">A name for a messaging channel.If a recipient subscribes
            using a channel, and a sender sends a message using the same channel, then this
            message will be delivered to the recipient. Other recipients who did not
            use a channel when subscribing (or who used a different channel) will not
            get the message. </param>
            <param name="message">The message to send to subscribed recipients.</param>
        </member>
        <member name="M:Loxodon.Framework.Messaging.IMessenger.Publish``1(System.String,``0)">
            <summary>
            Publish a message to subscribed recipients. 
            </summary>
            <typeparam name="T">The type of message that will be sent.</typeparam>
            <param name="channel">A name for a messaging channel.If a recipient subscribes
            using a channel, and a sender sends a message using the same channel, then this
            message will be delivered to the recipient. Other recipients who did not
            use a channel when subscribing (or who used a different channel) will not
            get the message. </param>
            <param name="message">The message to send to subscribed recipients.</param>
        </member>
        <member name="P:Loxodon.Framework.Messaging.MessageBase.Sender">
            <summary>
            Gets or sets the message's sender.
            </summary>
        </member>
        <member name="T:Loxodon.Framework.Messaging.Messenger">
            <summary>
            The Messenger is a class allowing objects to exchange messages.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Messaging.Messenger.Subscribe(System.Type,System.Action{System.Object})">
            <summary>
            Subscribe a message.
            </summary>
            <param name="type">The type of message that the recipient subscribes for.</param>
            <param name="action">The action that will be executed when a message of type T is sent.</param>
            <returns>Disposable object that can be used to unsubscribe the message from the messenger.
            if the disposable object is disposed,the message is automatically unsubscribed.</returns>
        </member>
        <member name="M:Loxodon.Framework.Messaging.Messenger.Subscribe``1(System.Action{``0})">
            <summary>
            Subscribe a message.
            </summary>
            <typeparam name="T">The type of message that the recipient subscribes for.</typeparam>
            <param name="action">The action that will be executed when a message of type T is sent.</param>
            <returns>Disposable object that can be used to unsubscribe the message from the messenger.
            if the disposable object is disposed,the message is automatically unsubscribed.</returns>
        </member>
        <member name="M:Loxodon.Framework.Messaging.Messenger.Subscribe(System.String,System.Type,System.Action{System.Object})">
            <summary>
            Subscribe a message.
            </summary>
            <param name="channel">A name for a messaging channel.If a recipient subscribes
            using a channel, and a sender sends a message using the same channel, then this
            message will be delivered to the recipient. Other recipients who did not
            use a channel when subscribing (or who used a different channel) will not
            get the message. </param>
            <param name="type">The type of message that the recipient subscribes for.</param>
            <param name="action">The action that will be executed when a message of type T is sent.</param>
            <returns>Disposable object that can be used to unsubscribe the message from the messenger.
            if the disposable object is disposed,the message is automatically unsubscribed.</returns>
        </member>
        <member name="M:Loxodon.Framework.Messaging.Messenger.Subscribe``1(System.String,System.Action{``0})">
            <summary>
            Subscribe a message.
            </summary>
            <typeparam name="T">The type of message that the recipient subscribes for.</typeparam>
            <param name="channel">A name for a messaging channel.If a recipient subscribes
            using a channel, and a sender sends a message using the same channel, then this
            message will be delivered to the recipient. Other recipients who did not
            use a channel when subscribing (or who used a different channel) will not
            get the message. </param>
            <param name="action">The action that will be executed when a message of type T is sent.</param>
            <returns>Disposable object that can be used to unsubscribe the message from the messenger.
            if the disposable object is disposed,the message is automatically unsubscribed.</returns>
        </member>
        <member name="M:Loxodon.Framework.Messaging.Messenger.Publish(System.Object)">
            <summary>
            Publish a message to subscribed recipients. 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Loxodon.Framework.Messaging.Messenger.Publish``1(``0)">
            <summary>
            Publish a message to subscribed recipients. 
            </summary>
            <typeparam name="T">The type of message that will be sent.</typeparam>
            <param name="message">The message to send to subscribed recipients.</param>
        </member>
        <member name="M:Loxodon.Framework.Messaging.Messenger.Publish(System.String,System.Object)">
            <summary>
            Publish a message to subscribed recipients. 
            </summary>
            <param name="channel">A name for a messaging channel.If a recipient subscribes
            using a channel, and a sender sends a message using the same channel, then this
            message will be delivered to the recipient. Other recipients who did not
            use a channel when subscribing (or who used a different channel) will not
            get the message. </param>
            <param name="message">The message to send to subscribed recipients.</param>
        </member>
        <member name="M:Loxodon.Framework.Messaging.Messenger.Publish``1(System.String,``0)">
            <summary>
            Publish a message to subscribed recipients. 
            </summary>
            <typeparam name="T">The type of message that will be sent.</typeparam>
            <param name="channel">A name for a messaging channel.If a recipient subscribes
            using a channel, and a sender sends a message using the same channel, then this
            message will be delivered to the recipient. Other recipients who did not
            use a channel when subscribing (or who used a different channel) will not
            get the message. </param>
            <param name="message">The message to send to subscribed recipients.</param>
        </member>
        <member name="T:Loxodon.Framework.Prefs.AbstractFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.AbstractFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.AbstractFactory.#ctor(Loxodon.Framework.Prefs.ISerializer)">
            <summary>
            
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.AbstractFactory.#ctor(Loxodon.Framework.Prefs.ISerializer,Loxodon.Framework.Prefs.IEncryptor)">
            <summary>
            
            </summary>
            <param name="serializer"></param>
            <param name="encryptor"></param>
        </member>
        <member name="P:Loxodon.Framework.Prefs.AbstractFactory.Encryptor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Loxodon.Framework.Prefs.AbstractFactory.Serializer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.AbstractFactory.Create(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.ISerializer.AddTypeEncoder(Loxodon.Framework.Prefs.ITypeEncoder)">
            <summary>
            
            </summary>
            <param name="encoder"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.ISerializer.RemoveTypeEncoder(Loxodon.Framework.Prefs.ITypeEncoder)">
            <summary>
            
            </summary>
            <param name="encoder"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.ISerializer.Deserialize(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="type"></param>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.ISerializer.Serialize(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="P:Loxodon.Framework.Prefs.ITypeEncoder.Priority">
            <summary>
            Positive or negative, the default value is 0.the type encoder with the higher priority will be executed first.
            </summary>
        </member>
        <member name="T:Loxodon.Framework.Prefs.Preferences">
            <summary>
            Abstract class for accessing and modifying preference data
            </summary>
        </member>
        <member name="F:Loxodon.Framework.Prefs.Preferences.GLOBAL_NAME">
            <summary>
            The name of global preferences.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetFactory">
            <summary>
            Retrieve a factory of Preferences.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetGlobalPreferences">
            <summary>
            Retrieve a global preferences.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetPreferences(System.String)">
            <summary>
            Retrieve a user's preferences.
            </summary>
            <param name="name">The name of the preferences to retrieve.eg:username or username@zone</param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.Register(Loxodon.Framework.Prefs.IFactory)">
            <summary>
            Register a factory of Preferences.
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.SaveAll">
            <summary>
            Save all these preferences.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.DeleteAll">
            <summary>
            Delete all these preferences.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.#ctor(System.String)">
            <summary>
            Preferences
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:Loxodon.Framework.Prefs.Preferences.Name">
            <summary>
            The name of the preferences
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.Load">
            <summary>
            Load the preferences from the local file system.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetString(System.String)">
            <summary>
            Retrieve a string value from the preferences.
            The method returns null if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a string.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetString(System.String,System.String)">
            <summary>
            Retrieve a string value from the preferences. 
            The method returns defaultValue if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <param name="defaultValue">Value to return if this preference does not exist</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a string.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.SetString(System.String,System.String)">
            <summary>
            Set a string value in the preferences
            </summary>
            <param name="key">The name of the preference</param>
            <param name="value">The new value for the preference</param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetFloat(System.String)">
            <summary>
            Retrieve a float value from the preferences.
            The method returns 0f if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a float.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetFloat(System.String,System.Single)">
            <summary>
            Retrieve a float value from the preferences. 
            The method returns defaultValue if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <param name="defaultValue">Value to return if this preference does not exist</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a float.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.SetFloat(System.String,System.Single)">
            <summary>
            Set a float value in the preferences
            </summary>
            <param name="key">The name of the preference</param>
            <param name="value">The new value for the preference</param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetDouble(System.String)">
            <summary>
            Retrieve a double value from the preferences.
            The method returns 0d if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a double.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetDouble(System.String,System.Double)">
            <summary>
            Retrieve a double value from the preferences. 
            The method returns defaultValue if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <param name="defaultValue">Value to return if this preference does not exist</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a double.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.SetDouble(System.String,System.Double)">
            <summary>
            Set a double value in the preferences
            </summary>
            <param name="key">The name of the preference</param>
            <param name="value">The new value for the preference</param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetBool(System.String)">
            <summary>
            Retrieve a bool value from the preferences.
            The method returns false if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a bool.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetBool(System.String,System.Boolean)">
            <summary>
            Retrieve a bool value from the preferences. 
            The method returns defaultValue if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <param name="defaultValue">Value to return if this preference does not exist</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a bool.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.SetBool(System.String,System.Boolean)">
            <summary>
            Set a bool value in the preferences
            </summary>
            <param name="key">The name of the preference</param>
            <param name="value">The new value for the preference</param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetInt(System.String)">
            <summary>
            Retrieve a int value from the preferences.
            The method returns 0 if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a int.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetInt(System.String,System.Int32)">
            <summary>
            Retrieve a int value from the preferences. 
            The method returns defaultValue if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <param name="defaultValue">Value to return if this preference does not exist</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a int.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.SetInt(System.String,System.Int32)">
            <summary>
            Set a int value in the preferences
            </summary>
            <param name="key">The name of the preference</param>
            <param name="value">The new value for the preference</param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetLong(System.String)">
            <summary>
            Retrieve a long value from the preferences.
            The method returns 0L if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a long.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetLong(System.String,System.Int64)">
            <summary>
            Retrieve a long value from the preferences. 
            The method returns defaultValue if the key is not found.
            </summary>
            <param name="key">The name of the preference to retrieve</param>
            <param name="defaultValue">Value to return if this preference does not exist</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a long.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.SetLong(System.String,System.Int64)">
            <summary>
            Set a long value in the preferences
            </summary>
            <param name="key">The name of the preference</param>
            <param name="value">The new value for the preference</param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetObject``1(System.String)">
            <summary>
            Retrieve a T value from the preferences.
            The method returns default(T) if the key is not found.
            Supported Types:ValueType, Vector2 ,Vector3 ,Vector4,Color,Color32 and  Serializable types
            </summary>
            <typeparam name="T">Supported: ValueType, Vector2 ,Vector3 ,Vector4,Color,Color32 and  Serializable types</typeparam>
            <param name="key">The name of the preference to retrieve</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a T.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.GetObject``1(System.String,``0)">
            <summary>
            Retrieve a T value from the preferences. 
            The method returns defaultValue if the key is not found.
            Supported Types:ValueType, Vector2 ,Vector3 ,Vector4,Color,Color32,Version and  Serializable types
            </summary>
            <typeparam name="T">Supported: ValueType, Vector2 ,Vector3 ,Vector4,Color,Color32,Version and  Serializable types</typeparam>
            <param name="key">The name of the preference to retrieve</param>
            <param name="defaultValue">Value to return if this preference does not exist</param>
            <exception cref="T:System.Exception"></exception>
            <returns>Returns the preference value if it exists, or defaultValue.  Throws
            Exception if there is a preference with this name that is not a T.</returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.SetObject``1(System.String,``0)">
            <summary>
            Set a T value in the preferences
            Supported Types:ValueType, Vector2 ,Vector3 ,Vector4,Color,Color32 and  Serializable types
            </summary>
            <typeparam name="T">Supported: ValueType, Vector2 ,Vector3 ,Vector4,Color,Color32 and  Serializable types</typeparam>
            <param name="key">The name of the preference</param>
            <param name="value">The new value for the preference</param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.ContainsKey(System.String)">
            <summary>
            Checks whether the preferences contains a preference.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.Remove(System.String)">
            <summary>
            Remove a value from the preferences.
            </summary>
            <param name="key">The name of the preference to remove</param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.RemoveAll">
            <summary>
            Remove all values.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.Save">
            <summary>
            Save the preferences to the local disk
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.Preferences.Delete">
            <summary>
            Delete the preferences file.
            </summary>
        </member>
        <member name="T:Loxodon.Framework.Prefs.DefaultEncryptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.DefaultEncryptor.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.DefaultEncryptor.#ctor(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="iv"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.DefaultEncryptor.CheckKey(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.DefaultEncryptor.CheckIV(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.DefaultEncryptor.Encode(System.Byte[])">
            <summary>
            encryption
            </summary>
            <param name="plainData"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.DefaultEncryptor.Decode(System.Byte[])">
            <summary>
            decryption
            </summary>
            <param name="cipherData"></param>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Prefs.BinaryFilePreferencesFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferencesFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferencesFactory.#ctor(Loxodon.Framework.Prefs.ISerializer)">
            <summary>
            
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferencesFactory.#ctor(Loxodon.Framework.Prefs.ISerializer,Loxodon.Framework.Prefs.IEncryptor)">
            <summary>
            
            </summary>
            <param name="serializer"></param>
            <param name="encryptor"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferencesFactory.Create(System.String)">
            <summary>
            Create an instance of the BinaryFilePreferences.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Prefs.BinaryFilePreferences">
            <summary>
            
            </summary>
        </member>
        <member name="F:Loxodon.Framework.Prefs.BinaryFilePreferences.dict">
            <summary>
            cache.
            </summary>
        </member>
        <member name="F:Loxodon.Framework.Prefs.BinaryFilePreferences.serializer">
            <summary>
            serializer
            </summary>
        </member>
        <member name="F:Loxodon.Framework.Prefs.BinaryFilePreferences.encryptor">
            <summary>
            encryptor
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferences.#ctor(System.String,Loxodon.Framework.Prefs.ISerializer,Loxodon.Framework.Prefs.IEncryptor)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="serializer"></param>
            <param name="encryptor"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferences.GetDirectory">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferences.GetFullFileName">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferences.Load">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferences.GetObject``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferences.SetObject``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferences.ContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferences.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferences.RemoveAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferences.Save">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.BinaryFilePreferences.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="T:Loxodon.Framework.Prefs.IFactory">
            <summary>
            IFactory
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.IFactory.Create(System.String)">
            <summary>
            Create an instance of the preferences.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Prefs.IEncryptor">
            <summary>
            A interface for encoding and decoding preference data.
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.IEncryptor.Encode(System.Byte[])">
            <summary>
            encryption
            </summary>
            <param name="plainData">The plain data.</param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.IEncryptor.Decode(System.Byte[])">
            <summary>
            decryption
            </summary>
            <param name="cipherData">The cipher data.</param>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Prefs.PlayerPrefsPreferencesFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferencesFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferencesFactory.#ctor(Loxodon.Framework.Prefs.ISerializer)">
            <summary>
            
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferencesFactory.#ctor(Loxodon.Framework.Prefs.ISerializer,Loxodon.Framework.Prefs.IEncryptor)">
            <summary>
            
            </summary>
            <param name="serializer"></param>
            <param name="encryptor"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferencesFactory.Create(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Loxodon.Framework.Prefs.PlayerPrefsPreferences">
            <summary>
            
            </summary>
        </member>
        <member name="F:Loxodon.Framework.Prefs.PlayerPrefsPreferences.KEYS">
            <summary>
            Default key
            </summary>
        </member>
        <member name="F:Loxodon.Framework.Prefs.PlayerPrefsPreferences.serializer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Loxodon.Framework.Prefs.PlayerPrefsPreferences.encryptor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Loxodon.Framework.Prefs.PlayerPrefsPreferences.keys">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.#ctor(System.String,Loxodon.Framework.Prefs.ISerializer,Loxodon.Framework.Prefs.IEncryptor)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="serializer"></param>
            <param name="encryptor"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.Load">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.Key(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.LoadKeys">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.SaveKeys">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.GetObject``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.SetObject``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.ContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.RemoveAll">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.Save">
            <summary>
            
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Prefs.PlayerPrefsPreferences.Delete">
            <summary>
            
            </summary>
        </member>
        <member name="T:Loxodon.Framework.Contexts.ApplicationContext">
            <summary>
            ApplicationContext
            </summary>
        </member>
        <member name="M:Loxodon.Framework.Contexts.ApplicationContext.GetMainLoopExcutor">
            <summary>
            Retrieve a executor on the main thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Contexts.ApplicationContext.GetGlobalPreferences">
            <summary>
            Retrieve a global preferences.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Contexts.ApplicationContext.GetUserPreferences(System.String)">
            <summary>
            Retrieve a user's preferences.
            </summary>
            <param name="name">The name of the preferences to retrieve.eg:username or username@zone</param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Observables.ObservableObject.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanging event.
            </summary>
            <param name="propertyName">Property name.</param>
        </member>
        <member name="M:Loxodon.Framework.Observables.ObservableObject.Set``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Set the specified propertyExpression, field and newValue.
            </summary>
            <param name="propertyExpression">Property expression.</param>
            <param name="field">Field.</param>
            <param name="newValue">New value.</param>
            <typeparam name="T">The 1st type parameter.</typeparam>
        </member>
        <member name="M:Loxodon.Framework.Observables.ObservableObject.Set``1(``0@,``0,System.String)">
            <summary>
             Set the specified propertyName, field, newValue.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="field"></param>
            <param name="newValue"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Loxodon.Framework.Utilities.WeakValueDictionary`2.Cleanup">
            <summary>
            Removes the left-over weak references for entries in the dictionary whose value has already been reclaimed by the garbage collector. 
            </summary>
        </member>
    </members>
</doc>
